os <- import("os")
os$getcwd()
os <- import("os")
os$getcwd()
use_python("C:/Python32")
py_available()
exit
require(reticulate)
py_available()
use_python("C:/Users/Mats/AppData/Local/Programs/Python/Python37-32")
py_available()
py_discover_config()
os <- import("os")
use_python("C:/Users/Mats/AppData/Local/Programs/Python/Python37")
py_available()
py_discover_config()
os <- import("os")
os$getcwd()
os$listdir()
conda_create(“r-reticulate”)
conda_create("r-reticulate")
conda_create("r-reticulate")
conda_install(“r-reticulate”, “numpy”)
conda_install("r-reticulate", "numpy")
numpy <- import("numpy")
py_available()
require(reticulate)
py_available()
use_python("C:/Users/Mats/AppData/Local/Programs/Python/Python37")
conda_create("r-reticulate")
ser= c(0.4,0.3,0.23,0.18,0.17)
N = 7
1:N
find.geom = function(a,r,asym,N){
kk = 1:N
points = a*r**kk + asym
}
tst = find.geom(3,0.6,10)
tst = find.geom(3,0.6,0.12,10)
plot(tst)
find.geom = function(a,r,asym,N,pos1,ser){
kk = 1:N
points = a*r**kk + asym
se = (poinst[pos1:(pos1+length(ser))] - ser)**2
}
tst = find.geom(3,0.6,0.12,20,4,ser)
find.geom = function(a,r,asym,N,pos1,ser){
kk = 1:N
points = a*r**kk + asym
se = (points[pos1:(pos1+length(ser))] - ser)**2
}
tst = find.geom(3,0.6,0.12,20,4,ser)
find.geom = function(a,r,asym,N,pos1,ser){
kk = 1:N
points = a*r**kk + asym
se = (points[pos1:(pos1+length(ser)+1)] - ser)**2
}
tst = find.geom(3,0.6,0.12,20,4,ser)
find.geom = function(a,r,asym,N,pos1,ser){
kk = 1:N
points = a*r**kk + asym
print(length(pos1:length(ser)));print(length(ser))
se = (points[pos1:(pos1+length(ser)+1)] - ser)**2
}
tst = find.geom(3,0.6,0.12,20,4,ser)
find.geom = function(a,r,asym,N,pos1,ser){
kk = 1:N
points = a*r**kk + asym
print(length(pos1:(pos1+length(ser))));print(length(ser))
se = (points[pos1:(pos1+length(ser)+1)] - ser)**2
}
tst = find.geom(3,0.6,0.12,20,4,ser)
find.geom = function(a,r,asym,N,pos1,ser){
kk = 1:N
points = a*r**kk + asym
print(length(pos1:(pos1+length(ser))));print(length(ser))
se = (points[pos1:(pos1+length(ser)-1)] - ser)**2
}
tst = find.geom(3,0.6,0.12,20,4,ser)
tst
find.geom = function(a,r,asym,N,pos1,ser){
kk = 1:N
points = a*r**kk + asym
mse = mean((points[pos1:(pos1+length(ser)-1)] - ser)**2)
mse
}
tst = find.geom(3,0.6,0.12,20,4,ser)
tst
ops = optim(par(c(2,0.5,0.1,1)),find.geom,N = 100,ser = ser)
ops = optim(par(c(a=2,r=0.5,asym=0.1,pos1=1)),find.geom,N = 100,ser = ser)
ops = optim(par=(c(a=2,r=0.5,asym=0.1,pos1=1)),find.geom,N = 100,ser = ser)
ops = optim(par=c(a=2,r=0.5,asym=0.1,pos1=1)),find.geom,N = 100,ser = ser)
ops = optim(par=c(a=2,r=0.5,asym=0.1,pos1=1),find.geom,N = 100,ser = ser)
ops = optim(par=c(a=2,r=0.5,asym=0.1,pos1=1),fn = find.geom,N = 100,ser = ser)
find.geom = function(a,r,asym,pos1,N,ser){
kk = 1:N
points = a*r**kk + asym
mse = mean((points[pos1:(pos1+length(ser)-1)] - ser)**2)
mse
}
ops = optim(par=c(a=2,r=0.5,asym=0.1,pos1=1),fn = find.geom, N = 100, ser = ser)
ops = optimize(par=c(a=2,r=0.5,asym=0.1,pos1=1),fn = find.geom, N = 100, ser = ser)
ops = optim(par=c(a=2,r=0.5,asym=0.1,pos1=1),fn = find.geom, N = 100, ser = ser)
find.geom = function(a,r,asym,pos1,N,ser){
kk = 1:N
points = a*r**kk + asym
mse = mean((points[pos1:(pos1+length(ser)-1)] - ser)**2)
mse
}
tst = find.geom(3,0.6,0.12,20,4,ser)
plot(tst)
tst
tst = find.geom(3,0.6,0.12,20,4,ser)
tst
tst = find.geom(3,0.6,0.12,4,20,ser)
tst
find.geom = function(a,ar,asym,pos1,N,ser){
kk = 1:N
points = a*ar**kk + asym
mse = mean((points[pos1:(pos1+length(ser)-1)] - ser)**2)
mse
}
ops = optim(par=c(a=2,ar=0.5,asym=0.1,pos1=1),fn = find.geom, N = 100, ser = ser)
find.geom = function(a,r,asym,pos1,N,ser){
kk = 1:N
points = a*r**kk + asym
mse = mean((points[pos1:(pos1+length(ser)-1)] - ser)**2)
mse
}
ops = optim(par=c(r=2,r=0.5,asym=0.1,pos1=1),fn = find.geom, N = 100, ser = ser)
ops = optim(c(r=2,r=0.5,asym=0.1,pos1=1),fn = find.geom, N = 100, ser = ser)
ops = optim(r=2,r=0.5,asym=0.1,pos1=1,fn = find.geom, N = 100, ser = ser)
ops = optim(par = c(r = 0.5),fn = find.geom, N = 100, ser = ser)
ops = optim(par = c(r = 0.5,a = 2),fn = find.geom, N = 100, ser = ser)
ops = optim(par = c(3,0.6,0.12,4),fn = find.geom, N = 100, ser = ser)
ops = optim(par = c(3,0.6,0.12,4),fn = find.geom, N = 100, ser = ser, method = "BFGS")
length(c(3,0.6,0.12,4))
ops = optim(par = c(3,0.6,0.12,4),fn = find.geom, N = 100, ser = ser, method = "BFGS")
par = c(3,0.6,0.12,4)
par
find.geom()
find.geom
find.geom = function(params,N,ser){
params[1] = a
params[2] = r
params[3] = asym
params[4] = pos1
kk = 1:N
points = a*r**kk + asym
mse = mean((points[pos1:(pos1+length(ser)-1)] - ser)**2)
mse
}
ops = optim(par = c(3,0.6,0.12,4),fn = find.geom, N = 100, ser = ser, method = "BFGS")
tst = find.geom(c(3,0.6,0.12,4),20,ser)
tst = find.geom(c(3,0.6,0.12,4),20,ser)
find.geom = function(params,N,ser){
a = params[1]
r = params[2]
asym = params[3]
pos1 = params[4]
kk = 1:N
points = a*r**kk + asym
mse = mean((points[pos1:(pos1+length(ser)-1)] - ser)**2)
mse
}
tst = find.geom(c(3,0.6,0.12,4),20,ser)
tst
ops = optim(par = c(3,0.6,0.12,4),fn = find.geom, N = 100, ser = ser, method = "BFGS")
ops
length(ser)
find.geom = function(params,pos1,N,ser){
a = params[1]
r = params[2]
asym = params[3]
#pos1 = params[4]
kk = 1:N
points = a*r**kk + asym
mse = mean((points[pos1:(pos1+length(ser)-1)] - ser)**2)
mse
}
values = c()
for(NN in 1:(N-length(ser))){
ops = optim(par = c(3,0.6,0.12),pos1 = NN,fn = find.geom, N = 100, ser = ser, method = "BFGS")
values[NN] = ops$value
}
values
N = 100
values = c()
for(NN in 1:(N-length(ser))){
ops = optim(par = c(3,0.6,0.12),pos1 = NN,fn = find.geom, N = N, ser = ser, method = "BFGS")
values[NN] = ops$value
}
values
min(values)
which.min(values)
pos1 = which.min(values)
ops = optim(par = c(3,0.6,0.12),pos1 = pos1,fn = find.geom, N = N, ser = ser, method = "BFGS")
ops
choose(15,1)
choose(15,2)
choose(15,3)
187 / 455
choose(15,7)
choose(15,8)
choose(15,8)*187/455/60
choose(15,4)
choose(15,4) / 455
sentinel455 = read.csv(file = "sentinel455.csv")
getwd()
#save(muld.sp, file = "muld_koodiga.RData")
load(file = "muld_koodiga.RData")
getwd()
#save(muld.sp, file = "muld_koodiga.RData")
setwd("A:/MAKA/TEST/test/kaart")
load(file = "muld_koodiga.RData")
land.wide.18 = load.pic(dir = "A:/MAKA/KARU/pildid/Kagu-Eesti/2018", sat = "LC08")
load.pic = function(dir, sat){
setwd(dir)
list.sent = list.dirs(full.names = T, recursive = T)
list.sent  = list.sent[ grepl(sat, list.sent) ]
ext = c(669400,685000,6460000,6472500)
llprj <-     "+proj=lcc +lat_1=59.33333333333334 +lat_2=58 +lat_0=57.51755393055556 +lon_0=24 +x_0=500000 +y_0=6375000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs "
if(sat == "S2"){bands = c("B02","B03", "B04", "B05", "B06", "B07", "B08", "B11", "B12")}
else{bands = c("B2","B3", "B4", "B5", "B6", "B7")}
data.sentinel = data.frame(band1 = c(), x = c(), y = c(), band = c(), kp = c())
for(sent in list.sent){
setwd(file.path(dir, sent))
options(stringsAsFactors = FALSE)
all_sentinel = list.files(pattern = ".jp2$",full.names = TRUE)
for(j in 1:length(all_sentinel)){
sent.j = readGDAL(all_sentinel[j])
brick.j = brick(sent.j)
crp.j = crop(brick.j, ext)
if(is.na(maxValue(crp.j)) | maxValue(crp.j) == 0){
bind = F
next
}
spts.j = rasterToPoints(crp.j, spatial = TRUE)
dfx.j = as.data.frame(spTransform(spts.j, CRS(llprj)))
dfx.j$band = rep(bands[j],dim(dfx.j)[1])
dfx.j$kp = str_sub(sent, start = length(sent)-9)
print(head(dfx.j)); bind = T
if(bind == T){data.sentinel = rbind(data.sentinel, dfx.j)}
}
}
names(data.sentinel) = c("value","x","y", "band", "kp")
if(length(data.sentinel[data.sentinel$value == 0,]$value) > 0){
data.sentinel[data.sentinel$value == 0,]$value = NA
}
data.sentinel = na.omit(data.sentinel)
sent.wide = dcast(data.sentinel, x+y+kp ~ band)
sent.wide$satel = sat
sent.wide
}
require(reshape2)
require(dplyr)
require(rgeos)
#plotime kevadise fenoloogilise erinevuse ka
#sent 10-05-2018 ja 30-05-2018; need sama trajektooriga ka!
require(rgdal)
require(raster)
land.wide.18 = load.pic(dir = "A:/MAKA/KARU/pildid/Kagu-Eesti/2018", sat = "LC08")
######
require(stringr)
land.wide.18 = load.pic(dir = "A:/MAKA/KARU/pildid/Kagu-Eesti/2018", sat = "LC08")
table(land.wide.18$kp)
df = land.wide.18[land.wide.18$kp == 20180510,]
coordinates(df) <- ~ x + y
load(file = "muld_koodiga.RData")
#save(muld.sp, file = "muld_koodiga.RData")
setwd("A:/MAKA/TEST/test/kaart")
load(file = "muld_koodiga.RData")
proj4string(df) <- proj4string(muld.sp)
df.over = over(df,muld.sp)
#siit saab nüüd lõpuks mullakoodid kätte!!!
df$muld = df.over$kood
table(df.muld)
table(df$muld)
head(df)
df[is.na(df$muld),]$muld = 999
df = data.frame(df)
df[is.na(df$muld),]$muld = 999
table(df$muld)
hdf = head(df)
View(hdf)
View(hdf)
#minunurk:
summary(df$x);summary(df$y)
sent.wide.17 = load.pic(dir = "A:/MAKA/KARU/pildid/Kagu-Eesti/2017", sat = "S2")
sent.wide.18 = load.pic(dir = "A:/MAKA/KARU/pildid/Kagu-Eesti/2018", sat = "S2")
land.wide.17 = load.pic(dir = "A:/MAKA/KARU/pildid/Kagu-Eesti/2017", sat = "LC08")
landsat_luunja_vonnu = rbind(land.wide.17, land.wide.18)
sentinel_luunja_vonnu = rbind(sent.wide.17, sent.wide.18)
setwd("A:/MAKA/TEST/test/kaart")
save(landsat_luunja_vonnu, file = "landsat_luuna_vonnu.RData")
save(sentinel_luunja_vonnu, file = "sentinel_luuna_vonnu.RData")
#minunurk:
summary(df$x);summary(df$y)
#võtaks x 675000, 684988; y 6468000, 6472487
land.luuna = landsat_luunja_vonnu[landsat_luunja_vonnu$x > 675000 $ y > 6468000,]
names(landsat_luunja_vonnu)
#võtaks x 675000, 684988; y 6468000, 6472487
land.luuna = landsat_luunja_vonnu[landsat_luunja_vonnu$x > 675000 & landsat_luunja_vonnu$y > 6468000,]
684988 - 5000
684988 - 10000
6472487-5000
#võtaks x 675000, 684988; y 6468000, 6472487
land.luuna = landsat_luunja_vonnu[landsat_luunja_vonnu$x > 679988 & landsat_luunja_vonnu$y > 6467487,]
sqrt(309766)
names(df)
land.luuna$muld = merge(land.luuna, df[,c("x","y","muld")], all.x = T, by = c("x","y"))
View(land.luuna)
head(df[,c("x","y","muld")])
dfm = df[,c("x","y","muld")]
getwd()
save(dfm, file = "muld_ja_koordinaadid_luunja_vonnu.RData")
land.luuna = landsat_luunja_vonnu[landsat_luunja_vonnu$x > 679988 & landsat_luunja_vonnu$y > 6467487,] #5000x5000; pikslites ~557*557?
land.luuna$muld = merge(land.luuna, dfm, all.x = T, by = c("x","y"))
View(land.luuna)
head(dfm)
head(landsat_luunja_vonnu)
#võtaks x 675000, 684988; y 6468000, 6472487
land.luunja = landsat_luunja_vonnu[landsat_luunja_vonnu$x > 679988 & landsat_luunja_vonnu$y > 6467487,] #5000x5000; pikslites ~557*557?
land.luunja = merge(land.luunja, dfm, all.x = T, by = c("x","y"))
View(land.luuna)
head(landsat_luunja_vonnu)
View(land.luunja)
#siia veel üks mullateisendus peale, vastavalt sellele, mis mudelis oli!
setwd("A:/MAKA/TEST/test")
read.csv("sentinel455.csv")
sent455 = read.csv("sentinel455.csv")
muld0 = unique(sent455$muld)
muld0
table(land.luunja$muld)
land.luunja[!(land.luunja$muld %in% c(21,42,43,44,45,51,53,63,64)),]$muld = 999
table(land.luunja$muld)
land.luunja[!(land.luunja$muld %in% c(245,77,21,42,43,51,48,37,44,61,64,53)),]$muld = 999
table(land.luunja$muld)
landsat_luunja_vonnu_muld = merge(landsat_luunja_vonnu, dfm, all.x = T, by = c("x","y"))
sentinel_luunja_vonnu_muld = merge(sentinel_luunja_vonnu, dfm, all.x = T, by = c("x","y"))
landsat_luunja_vonnu_muld[!(landsat_luunja_vonnu_muld$muld %in% c(245,77,21,42,43,51,48,37,44,61,64,53)),]$muld = 999
sentinel_luunja_vonnu_muld[!(sentinel_luunja_vonnu_muld$muld %in% c(245,77,21,42,43,51,48,37,44,61,64,53)),]$muld = 999
setwd("A:/MAKA/TEST/test/kaart")
save(landsat_luunja_vonnu_muld, file = "landsat_luuna_vonnu_muld.RData")
save(sentinel_luunja_vonnu_muld, file = "sentinel_luuna_vonnu_muld.RData")
write.csv(landsat_luunja_vonnu_muld, "landsat_kaart.csv")
write.csv(sentinel_luunja_vonnu_muld, "sentinel_kaart.csv")
muld.l = dcast(landsat_luunja_vonnu_muld$muld,c(x,y)~muld,fun.aggregate = function(x){as.integer(length(x) > 0)})
muld.l = dcast(landsat_luunja_vonnu_muld$muld,c(landsat_luunja_vonnu_muld$x,landsat_luunja_vonnu_muld$y)~landsat_luunja_vonnu_muld$muld,fun.aggregate = function(x){as.integer(length(x) > 0)})
muld.l = dcast(landsat_luunja_vonnu_muld,c(x,y)~muld,fun.aggregate = function(x){as.integer(length(x) > 0)})
head(muld.l)
dim(muld.l)
muld.l = dcast(dfm,c(x,y)~muld,fun.aggregate = function(x){as.integer(length(x) > 0)})
dim(dfm)
dim(muld.l)
muld.l = dcast(dfm, x+y~muld,fun.aggregate = function(x){as.integer(length(x) > 0)})
dim(muld.l)
head(muld.l)
head(dfm)
landsat_luunja_vonnu_muld_dummy = merge(landsat_luunja_vonnu_muld, muld.l, all.x = T, by = c("x","y"))
sentinel_luunja_vonnu_muld_dummy = merge(sentinel_luunja_vonnu_muld, muld.l, all.x = T, by = c("x","y"))
write.csv(landsat_luunja_vonnu_muld_dummy, "landsat_kaart.csv")
write.csv(sentinel_luunja_vonnu_muld_dummy, "sentinel_kaart.csv")
muld0
dfm1 = dfm[!(dfm$muld %in% c(45,77,21,42,43,51,48,37,44,61,64,53)),]$muld = 999
muld.l = dcast(dfm1, x+y~muld,fun.aggregate = function(x){as.integer(length(x) > 0)})
dfm1 = dfm
dfm1[!(dfm1$muld %in% c(45,77,21,42,43,51,48,37,44,61,64,53)),]$muld = 999
muld.l = dcast(dfm1, x+y~muld,fun.aggregate = function(x){as.integer(length(x) > 0)})
head(muld.l)
landsat_luunja_vonnu_muld = merge(landsat_luunja_vonnu, dfm, all.x = T, by = c("x","y"))
sentinel_luunja_vonnu_muld = merge(sentinel_luunja_vonnu, dfm, all.x = T, by = c("x","y"))
landsat_luunja_vonnu_muld[!(landsat_luunja_vonnu_muld$muld %in% c(45,77,21,42,43,51,48,37,44,61,64,53)),]$muld = 999
sentinel_luunja_vonnu_muld[!(sentinel_luunja_vonnu_muld$muld %in% c(45,77,21,42,43,51,48,37,44,61,64,53)),]$muld = 999
landsat_luunja_vonnu_muld_dummy = merge(landsat_luunja_vonnu_muld, muld.l, all.x = T, by = c("x","y"))
sentinel_luunja_vonnu_muld_dummy = merge(sentinel_luunja_vonnu_muld, muld.l, all.x = T, by = c("x","y"))
#kas kuupäevad klapivad!?
unique(sent455$kp)
unique(landsat_luunja_vonnu_muld_dummy$kp)
#siia veel üks mullateisendus peale, vastavalt sellele, mis mudelis oli!
setwd("A:/MAKA/TEST/test")
land455 = read.csv("landsat455.csv")
#kas kuupäevad klapivad!?
unique(land455$kp)
?as.Date
landsat_luunja_vonnu_muld_dummy$kp = as.Date(landsat_luunja_vonnu_muld_dummy$kp, "Ymd")
head(landsat_luunja_vonnu_muld_dummy)
landsat_luunja_vonnu_muld_dummy$kp = as.Date(landsat_luunja_vonnu_muld_dummy$kp, "%Y%m%d")
head(landsat_luunja_vonnu_muld_dummy)
landsat_luunja_vonnu_muld_dummy = merge(landsat_luunja_vonnu_muld, muld.l, all.x = T, by = c("x","y"))
landsat_luunja_vonnu_muld_dummy$kp = as.Date(landsat_luunja_vonnu_muld_dummy$kp, "%Y%m%d")
head(landsat_luunja_vonnu_muld_dummy)
unique(landsat_luunja_vonnu_muld_dummy$kp) %in% unique(land455$kp)
unique(landsat_luunja_vonnu_muld_dummy$kp)
unique(land455$kp)
sentinel_luunja_vonnu_muld_dummy$kp = as.Date(sentinel_luunja_vonnu_muld_dummy$kp, "%Y%m%d")
unique(sentinel_luunja_vonnu_muld_dummy$kp) %in% unique(sent455$kp)
unique(sentinel_luunja_vonnu_muld_dummy$kp)
unique(sent455$kp)
typeof(unique(sentinel_luunja_vonnu_muld_dummy$kp))
typeof(unique(sent455$kp))
as.character(unique(landsat_luunja_vonnu_muld_dummy$kp)) %in% unique(land455$kp)
as.character(unique(sentinel_luunja_vonnu_muld_dummy$kp)) %in% unique(sent455$kp)
ld = landsat_luunja_vonnu_muld_dummy[as.character(unique(landsat_luunja_vonnu_muld_dummy$kp)) %in% unique(land455$kp),]
sd = sentinel_luunja_vonnu_muld_dummy[as.character(unique(sentinel_luunja_vonnu_muld_dummy$kp)) %in% unique(sent455$kp),]
head(sd)
head(ld)
write.csv(ld, "landsat_kaart.csv")
write.csv(sd, "sentinel_kaart.csv")
getwd()
names(ld)
write.csv(ld[1:10,], "landsat_kaart_test.csv")
ld$"37" = 0
ld$"37" = 0;ld$"77" = 0
write.csv(ld[1:10,], "landsat_kaart_test.csv")
head(ld)
write.csv(ld[1:10,], "landsat_kaart_test.csv")
sd$"37" = 0;sd$"77" = 0
write.csv(ld, "landsat_kaart.csv")
write.csv(sd, "sentinel_kaart.csv")
write.csv(ld[1:1000,], "landsat_kaart1000.csv")
as.character(unique(ld$kp)) %in% unique(land455$kp)
as.character(unique(ss$kp)) %in% unique(sent455$kp)
as.character(unique(sd$kp)) %in% unique(sent455$kp)
ld = landsat_luunja_vonnu_muld_dummy[as.character(unique(landsat_luunja_vonnu_muld_dummy$kp)) %in% unique(land455$kp),]
sd = sentinel_luunja_vonnu_muld_dummy[as.character(unique(sentinel_luunja_vonnu_muld_dummy$kp)) %in% unique(sent455$kp),]
as.character(unique(ld$kp)) %in% unique(land455$kp)
as.character(unique(sd$kp)) %in% unique(sent455$kp)
as.character(unique(landsat_luunja_vonnu_muld_dummy$kp))
t1 = as.character(unique(landsat_luunja_vonnu_muld_dummy$kp))
landsat_luunja_vonnu_muld_dummy$kp = as.character(landsat_luunja_vonnu_muld_dummy$kp)
sentinel_luunja_vonnu_muld_dummy$kp = as.character(sentinel_luunja_vonnu_muld_dummy$kp)
ld = landsat_luunja_vonnu_muld_dummy[landsat_luunja_vonnu_muld_dummy$kp %in% unique(land455$kp),]
sd = sentinel_luunja_vonnu_muld_dummy[sentinel_luunja_vonnu_muld_dummy$kp %in% unique(sent455$kp),]
as.character(unique(ld$kp)) %in% unique(land455$kp)
as.character(unique(sd$kp)) %in% unique(sent455$kp)
ld$"37" = 0;ld$"77" = 0
sd$"37" = 0;sd$"77" = 0
write.csv(ld, "landsat_kaart.csv")
write.csv(sd, "sentinel_kaart.csv")
save(ld, file = "landsat_luuna_vonnu_muld_dummy_kp_oiged.RData")
save(sd, file = "sentinel_luuna_vonnu_muld_dummy_kp_oiged.RData")
write.csv(ld[1:1000,], "landsat_kaart1000.csv")
setwd("A:/MAKA/TEST")
setwd("A:/MAKA/TEST/test/kaart")
land.cart = read.csv("KAART_landsat.csv")
head(land.cart)
head(ld)
ldx = ld;
#kuupäevad ja koordinaadid paika
kpcart = unique(land.cart$kp)
kpcart
ldx = ld[match(kpcart, ld$kp),]
head(ldx)
require(gdata)
install.packages("gdata")
require(gdata)
ldx$kp <- reorder.factor(ldx$kp, new.order=kpcart)
head(ldx)
ldx = ldx %>% arrange(kp)
head(ldx)
ldx$kp = as.factor(ldx$kp)
ldx$kp <- reorder.factor(ldx$kp, new.order=kpcart)
ldx = ldx %>% arrange(kp)
head(ldx)
#kuupäevad ja koordinaadid paika
kpcart = as.factor(unique(land.cart$kp))
kpcart
ldx$kp <- reorder.factor(ldx$kp, new.order=kpcart)
ldx = ldx %>% arrange(kp)
head(ldx)
table(ldx$kp)
ldx = ld;
table(ldx$kp)
ldx = ld;
ldx$kp = as.factor(ldx$kp)
ldx$kp <- reorder.factor(ldx$kp, new.order=kpcart)
ldx = ldx %>% arrange(kp)
head(ldx)
head(land.cart)
land.cart$x = ldx$x;land.cart$y = ldx$y
head(land.cart)
dfmean = land.cart[,c(1:4,6,7)] %>% group_by(c(x,y)) %>% summarise_all(funs(mean))
dim(land.cart)
dim(ldx)
dfmean = land.cart[,c(1:4,6,7)] %>% group_by(.dots=c("x","y")) %>% summarise_all(funs(mean))
head(dfmean)
coordinates(dfmean) = ~ x + y
head(dfmean[1])
dfmean
plot(dfmean[1])
proj4string(dfmean) <- llprj
llprj <-  "+proj=lcc +lat_1=59.33333333333334 +lat_2=58 +lat_0=57.51755393055556 +lon_0=24 +x_0=500000 +y_0=6375000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs "
require(rgdal)
require(raster)
proj4string(dfmean) <- llprj
dfmean
plot(dfmean[1])
mean.br = brick(dfmean)
plot(dfmean[3])
land
#plotime punasega katastripiirid peale:
setwd("A:/MAKA/KARU/pildid/Kagu-Eesti/2018/LC08_185019_20180512")
all_landsat <- list.files(pattern = ".jp2$",full.names = TRUE)
land1 <- readGDAL(all_landsat[1])
land1
plot(land1)
dfmean
dfmean$MA
plot(dfmean$MA)
setwd("A:/MAKA/TEST/test/kaart")
save(dfmean, file = "CART_prognoos_mean.RData")
