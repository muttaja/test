require(rgdal)
install.packages(rgdal)
install.packages("rgdal")
install.packages("rgdal")
install.packages("rgdal")
require(rgdal)
install.packages("rgdal")
#midagi kokku võtta?
table(muld1[muld1$aproovitykk_id %in% sidxx,]$muld) #alla 10 kindlasti kokku; 2 puuduvat väärtust
print(c(1,2))
print(c(5,2))
sqrt(0.025)
#cart ja python
install.packages("reticulate")
require(reticulate)
py_available()
py_discover_config()
debug(py_available)
py_available()
py_discover_config()
use_python("C:/Python27"")
use_python("C:/Python27")
py_available()
py_available()
py_discover_config()
debug(py_available())
py_available()
os <- import(“os”)
os <- import("os")
os$getcwd()
os <- import("os")
os$getcwd()
use_python("C:/Python32")
py_available()
exit
require(reticulate)
py_available()
use_python("C:/Users/Mats/AppData/Local/Programs/Python/Python37-32")
py_available()
py_discover_config()
os <- import("os")
use_python("C:/Users/Mats/AppData/Local/Programs/Python/Python37")
py_available()
py_discover_config()
os <- import("os")
os$getcwd()
os$listdir()
conda_create(“r-reticulate”)
conda_create("r-reticulate")
conda_create("r-reticulate")
conda_install(“r-reticulate”, “numpy”)
conda_install("r-reticulate", "numpy")
numpy <- import("numpy")
py_available()
require(reticulate)
py_available()
use_python("C:/Users/Mats/AppData/Local/Programs/Python/Python37")
conda_create("r-reticulate")
ser= c(0.4,0.3,0.23,0.18,0.17)
N = 7
1:N
find.geom = function(a,r,asym,N){
kk = 1:N
points = a*r**kk + asym
}
tst = find.geom(3,0.6,10)
tst = find.geom(3,0.6,0.12,10)
plot(tst)
find.geom = function(a,r,asym,N,pos1,ser){
kk = 1:N
points = a*r**kk + asym
se = (poinst[pos1:(pos1+length(ser))] - ser)**2
}
tst = find.geom(3,0.6,0.12,20,4,ser)
find.geom = function(a,r,asym,N,pos1,ser){
kk = 1:N
points = a*r**kk + asym
se = (points[pos1:(pos1+length(ser))] - ser)**2
}
tst = find.geom(3,0.6,0.12,20,4,ser)
find.geom = function(a,r,asym,N,pos1,ser){
kk = 1:N
points = a*r**kk + asym
se = (points[pos1:(pos1+length(ser)+1)] - ser)**2
}
tst = find.geom(3,0.6,0.12,20,4,ser)
find.geom = function(a,r,asym,N,pos1,ser){
kk = 1:N
points = a*r**kk + asym
print(length(pos1:length(ser)));print(length(ser))
se = (points[pos1:(pos1+length(ser)+1)] - ser)**2
}
tst = find.geom(3,0.6,0.12,20,4,ser)
find.geom = function(a,r,asym,N,pos1,ser){
kk = 1:N
points = a*r**kk + asym
print(length(pos1:(pos1+length(ser))));print(length(ser))
se = (points[pos1:(pos1+length(ser)+1)] - ser)**2
}
tst = find.geom(3,0.6,0.12,20,4,ser)
find.geom = function(a,r,asym,N,pos1,ser){
kk = 1:N
points = a*r**kk + asym
print(length(pos1:(pos1+length(ser))));print(length(ser))
se = (points[pos1:(pos1+length(ser)-1)] - ser)**2
}
tst = find.geom(3,0.6,0.12,20,4,ser)
tst
find.geom = function(a,r,asym,N,pos1,ser){
kk = 1:N
points = a*r**kk + asym
mse = mean((points[pos1:(pos1+length(ser)-1)] - ser)**2)
mse
}
tst = find.geom(3,0.6,0.12,20,4,ser)
tst
ops = optim(par(c(2,0.5,0.1,1)),find.geom,N = 100,ser = ser)
ops = optim(par(c(a=2,r=0.5,asym=0.1,pos1=1)),find.geom,N = 100,ser = ser)
ops = optim(par=(c(a=2,r=0.5,asym=0.1,pos1=1)),find.geom,N = 100,ser = ser)
ops = optim(par=c(a=2,r=0.5,asym=0.1,pos1=1)),find.geom,N = 100,ser = ser)
ops = optim(par=c(a=2,r=0.5,asym=0.1,pos1=1),find.geom,N = 100,ser = ser)
ops = optim(par=c(a=2,r=0.5,asym=0.1,pos1=1),fn = find.geom,N = 100,ser = ser)
find.geom = function(a,r,asym,pos1,N,ser){
kk = 1:N
points = a*r**kk + asym
mse = mean((points[pos1:(pos1+length(ser)-1)] - ser)**2)
mse
}
ops = optim(par=c(a=2,r=0.5,asym=0.1,pos1=1),fn = find.geom, N = 100, ser = ser)
ops = optimize(par=c(a=2,r=0.5,asym=0.1,pos1=1),fn = find.geom, N = 100, ser = ser)
ops = optim(par=c(a=2,r=0.5,asym=0.1,pos1=1),fn = find.geom, N = 100, ser = ser)
find.geom = function(a,r,asym,pos1,N,ser){
kk = 1:N
points = a*r**kk + asym
mse = mean((points[pos1:(pos1+length(ser)-1)] - ser)**2)
mse
}
tst = find.geom(3,0.6,0.12,20,4,ser)
plot(tst)
tst
tst = find.geom(3,0.6,0.12,20,4,ser)
tst
tst = find.geom(3,0.6,0.12,4,20,ser)
tst
find.geom = function(a,ar,asym,pos1,N,ser){
kk = 1:N
points = a*ar**kk + asym
mse = mean((points[pos1:(pos1+length(ser)-1)] - ser)**2)
mse
}
ops = optim(par=c(a=2,ar=0.5,asym=0.1,pos1=1),fn = find.geom, N = 100, ser = ser)
find.geom = function(a,r,asym,pos1,N,ser){
kk = 1:N
points = a*r**kk + asym
mse = mean((points[pos1:(pos1+length(ser)-1)] - ser)**2)
mse
}
ops = optim(par=c(r=2,r=0.5,asym=0.1,pos1=1),fn = find.geom, N = 100, ser = ser)
ops = optim(c(r=2,r=0.5,asym=0.1,pos1=1),fn = find.geom, N = 100, ser = ser)
ops = optim(r=2,r=0.5,asym=0.1,pos1=1,fn = find.geom, N = 100, ser = ser)
ops = optim(par = c(r = 0.5),fn = find.geom, N = 100, ser = ser)
ops = optim(par = c(r = 0.5,a = 2),fn = find.geom, N = 100, ser = ser)
ops = optim(par = c(3,0.6,0.12,4),fn = find.geom, N = 100, ser = ser)
ops = optim(par = c(3,0.6,0.12,4),fn = find.geom, N = 100, ser = ser, method = "BFGS")
length(c(3,0.6,0.12,4))
ops = optim(par = c(3,0.6,0.12,4),fn = find.geom, N = 100, ser = ser, method = "BFGS")
par = c(3,0.6,0.12,4)
par
find.geom()
find.geom
find.geom = function(params,N,ser){
params[1] = a
params[2] = r
params[3] = asym
params[4] = pos1
kk = 1:N
points = a*r**kk + asym
mse = mean((points[pos1:(pos1+length(ser)-1)] - ser)**2)
mse
}
ops = optim(par = c(3,0.6,0.12,4),fn = find.geom, N = 100, ser = ser, method = "BFGS")
tst = find.geom(c(3,0.6,0.12,4),20,ser)
tst = find.geom(c(3,0.6,0.12,4),20,ser)
find.geom = function(params,N,ser){
a = params[1]
r = params[2]
asym = params[3]
pos1 = params[4]
kk = 1:N
points = a*r**kk + asym
mse = mean((points[pos1:(pos1+length(ser)-1)] - ser)**2)
mse
}
tst = find.geom(c(3,0.6,0.12,4),20,ser)
tst
ops = optim(par = c(3,0.6,0.12,4),fn = find.geom, N = 100, ser = ser, method = "BFGS")
ops
length(ser)
find.geom = function(params,pos1,N,ser){
a = params[1]
r = params[2]
asym = params[3]
#pos1 = params[4]
kk = 1:N
points = a*r**kk + asym
mse = mean((points[pos1:(pos1+length(ser)-1)] - ser)**2)
mse
}
values = c()
for(NN in 1:(N-length(ser))){
ops = optim(par = c(3,0.6,0.12),pos1 = NN,fn = find.geom, N = 100, ser = ser, method = "BFGS")
values[NN] = ops$value
}
values
N = 100
values = c()
for(NN in 1:(N-length(ser))){
ops = optim(par = c(3,0.6,0.12),pos1 = NN,fn = find.geom, N = N, ser = ser, method = "BFGS")
values[NN] = ops$value
}
values
min(values)
which.min(values)
pos1 = which.min(values)
ops = optim(par = c(3,0.6,0.12),pos1 = pos1,fn = find.geom, N = N, ser = ser, method = "BFGS")
ops
choose(15,1)
choose(15,2)
choose(15,3)
187 / 455
choose(15,7)
choose(15,8)
choose(15,8)*187/455/60
choose(15,4)
choose(15,4) / 455
sentinel455 = read.csv(file = "sentinel455.csv")
getwd()
load(file ="KNN_pbp_landsat.RData")
setwd("A:/MAKA/TEST/test")
load(file ="KNN_pbp_landsat.RData")
tvmaht = 2 #proportsioonid
data0 = read.csv("landsat455.csv")
names(data0)
data0 = data0[,c(2:10,16:28)]
vars = names(data0)[c(4:22)]
kps = unique(data0$kp)
result.ls = ve
kps = unique(as.Date(data0$kp))
kps1 = sort(as.Date(kps, format = "%Y-%m-%d"))
load(file ="KNN_pbp_landsat.RData")
result.ls[[1]]
dev.off()
par(mfrow = c(3, 3))
for (i in 1:9) {
#i = 15
#kp0 = kps[i]
#kp1 = kps1[kps1 == kp0]
kp = kps[i]
kp_data = result.ls[[i]]
kp_data = merge(kp_data, taks.info, all.x = T, by = "aproovitykk_id")
plot(kp_data[,11],kp_data[,2], main = paste("Mänd ", kp), xlim = c(0,1), ylim = c(0,1), col = rgb(red = 0, green = 0, blue = 0, alpha = 0.369), ylab = "", xlab = "")
}
#kuused
dev.off()
par(mfrow = c(3, 3))
for (i in 1:9) {
kp = kps[i]
kp_data = result.ls[[i]]
kp_data = merge(kp_data, taks.info, all.x = T, by = "aproovitykk_id")
plot(kp_data[,12],kp_data[,3], main = paste("Kuusk ", kp), xlim = c(0,1), ylim = c(0,1), col = rgb(red = 0, green = 0, blue = 0, alpha = 0.369), ylab = "", xlab = "")
}
#kased
dev.off()
par(mfrow = c(3, 3))
for (i in 1:9) {
kp = kps[i]
kp_data = result.ls[[i]]
kp_data = merge(kp_data, taks.info, all.x = T, by = "aproovitykk_id")
plot(kp_data[,13],kp_data[,4], main = paste("Kask ", kp), xlim = c(0,1), ylim = c(0,1), col = rgb(red = 0, green = 0, blue = 0, alpha = 0.369), ylab = "", xlab = "")
}
#muud
dev.off()
par(mfrow = c(3, 3))
for (i in 1:9) {
kp = kps[i]
kp_data = result.ls[[i]]
kp_data = merge(kp_data, taks.info, all.x = T, by = "aproovitykk_id")
plot(kp_data[,14],kp_data[,5], main = paste("Muu ", kp), xlim = c(0,1), ylim = c(0,1), col = rgb(red = 0, green = 0, blue = 0, alpha = 0.369), ylab = "", xlab = "")
}
load("taks_info.Rdata")
kps = unique(as.Date(data0$kp))
kps1 = sort(as.Date(kps, format = "%Y-%m-%d"))
#männid
dev.off()
par(mfrow = c(3, 3))
for (i in 1:9) {
#i = 15
#kp0 = kps[i]
#kp1 = kps1[kps1 == kp0]
kp = kps[i]
kp_data = result.ls[[i]]
kp_data = merge(kp_data, taks.info, all.x = T, by = "aproovitykk_id")
plot(kp_data[,11],kp_data[,2], main = paste("Mänd ", kp), xlim = c(0,1), ylim = c(0,1), col = rgb(red = 0, green = 0, blue = 0, alpha = 0.369), ylab = "", xlab = "")
}
plot(kp_data[,11],kp_data[,2], main = paste("Mänd ", kp), xlim = c(0,1), ylim = c(0,1), col = rgb(red = 0, green = 0, blue = 0, alpha = 0.369), ylab = "", xlab = "", pch = 19)
dev.off()
par(mfrow = c(3, 3))
for (i in 1:9) {
#i = 15
#kp0 = kps[i]
#kp1 = kps1[kps1 == kp0]
kp = kps[i]
kp_data = result.ls[[i]]
kp_data = merge(kp_data, taks.info, all.x = T, by = "aproovitykk_id")
plot(kp_data[,11],kp_data[,2], main = paste("Mänd ", kp), xlim = c(0,1), ylim = c(0,1), col = rgb(red = 0, green = 0, blue = 0, alpha = 0.369), ylab = "", xlab = "", pch = 19)
}
kps = unique(as.Date(data0$kp))
kps1 = sort(as.Date(kps, format = "%Y-%m-%d"))
#männid
dev.off()
par(mfrow = c(3, 3))
for (i in 1:9) {
#i = 15
#kp0 = kps[i]
#kp1 = kps1[kps1 == kp0]
kp = kps[i]
kp_data = result.ls[[i]]
kp_data = merge(kp_data, taks.info, all.x = T, by = "aproovitykk_id")
plot(kp_data[,11],kp_data[,2], main = paste("Mänd ", kp), xlim = c(0,1), ylim = c(0,1), col = rgb(red = 0, green = 0, blue = 0, alpha = 0.2), ylab = "", xlab = "", pch = 19)
}
