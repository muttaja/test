rbind(row, row)
rb = rbind(row, row)
rw
rb = cbind(row, row)
rb
ret = data.frame()
ret[1] = row
ret[1] = row
?data.frame
ret[1,] = row
ret = vector(type = "list", length = n)
?vector
ret = vector(mode = "list", length = n)
ret = vector(mode = "list", length = 10)
ret[[1]] = row
ret
row()
row
rw
ret[[1]] = rw
ret
ret[[2:3]] = rw
ret
ret = vector(mode = "list", length = 10)
ret[[1:3]] = rw
ret[[2:3]] = rw
ret
rnorm(1)
rnorm(10)+1
rnorm(10)
rpois(lambda = 0.7)
rpois(lambda = 5)
rpois(lambda = 5, n = 10)
rpois(lambda = 0.5, n = 10)
rexp(lambda = 0.5, n = 10)
rexp(n = 10)
?rexp
rnorm(10) + 0.5
rnorm(10)/10 + 0.5
rnorm(10)/10 + 0.1
rnorm(10, mean = 0.1, sd = 0.1)
segadus = function(row,n){
ret = matrix(, nrow = n+1, ncol = 4)
ret[1] = row
rmat = matrix(data = rnorm(4*n, sd = 0.1), nrow = n)
ret[2:n+1,] = rmat[2:n+1,] + row
if(1 %in% row){
ret[2:n+1,] = row
}
return(ret)
}
rw
tw = segadus(rw)
tw = segadus(rw,10)
segadus = function(row,n){
ret = matrix(, nrow = n+1, ncol = 4)
ret[1,] = row
rmat = matrix(data = rnorm(4*n, sd = 0.1), nrow = n)
ret[2:n+1,] = rmat[2:n+1,] + row
if(1 %in% row){
ret[2:n+1,] = row
}
return(ret)
}
tw = segadus(rw,10)
segadus = function(row,n){
ret = matrix(, nrow = n+1, ncol = 4)
ret[1,] = row
rmat = matrix(data = rnorm(4*n, sd = 0.1), nrow = n)
ret[2:(n+1),] = rmat[2:(n+1),] + row
if(1 %in% row){
ret[(2:n+1),] = row
}
return(ret)
}
tw = segadus(rw,10)
segadus = function(row,n){
ret = matrix(, nrow = n+1, ncol = 4)
ret[1,] = row
rmat = matrix(data = rnorm(4*n, sd = 0.1), nrow = n)
ret[2:(n+1),] = rmat[1:n,] + row
if(1 %in% row){
ret[(2:n+1),] = row
}
return(ret)
}
tw = segadus(rw,10)
tw
colMeans(tw)
segadus = function(row,n){
ret = matrix(, nrow = n+1, ncol = 4)
ret[1,] = row
rmat = matrix(data = rnorm(4*n, sd = 0.1), nrow = n)
ret[2:(n+1),] = rmat[1:n,] + rep(row, each = n)
if(1 %in% row){
ret[(2:n+1),] = row
}
return(ret)
}
tw = segadus(rw,10)
tw
colMeans(tw)
segadus = function(row,n){
ret = matrix(, nrow = n+1, ncol = 4)
ret[1,] = row
rmat = matrix(data = rnorm(4*n, sd = 0.1), nrow = n)
ret[2:(n+1),] = rmat[1:n,] + rep(row, each = n)
if(1 %in% row){
ret[(2:n+1),] = row
}
ret[ret < 0] = 0
ret = ret / rowSums(ret)
return(ret)
}
tw = segadus(rw,10)
tw
colMeans(tw)
tw = segadus(rw,10)
tw
colMeans(tw)
tw = segadus(rw,1000)
colMeans(tw)
tw = segadus(rw,100000)
colMeans(tw)
tw = segadus(rw,10000000)
colMeans(tw)
tw = segadus(rw,10)
tw
colMeans(tw)
segadus = function(row,n){
ret = matrix(, nrow = n+1, ncol = 4)
ret[1,] = row
rmat = matrix(data = rnorm(4*n, sd = 0.1), nrow = n)
rowmat = matrix(rep(row, each = n))
retmat = rmat[1:n,] + rowmat
retmat[rowmat == 0] = 0
ret[2(n+1),] = retmat
if(1 %in% row){
ret[(2:n+1),] = row
}
ret[ret < 0] = 0
ret = ret / rowSums(ret)
return(ret)
}
tw = segadus(rw,10)
tw
colMeans(tw)
segadus = function(row,n){
ret = matrix(, nrow = n+1, ncol = 4)
ret[1,] = row
rmat = matrix(data = rnorm(4*n, sd = 0.1), nrow = n)
rowmat = matrix(rep(row, each = n))
retmat = rmat[1:n,] + rowmat
retmat[rowmat == 0] = 0
ret[2:(n+1),] = retmat
if(1 %in% row){
ret[(2:n+1),] = row
}
ret[ret < 0] = 0
ret = ret / rowSums(ret)
return(ret)
}
tw = segadus(rw,10)
tw
colMeans(tw)
segadus = function(row,n){
ret = matrix(, nrow = n+1, ncol = 4)
ret[1,] = row
rmat = matrix(data = rnorm(4*n, sd = 0.1), nrow = n)
rowmat = matrix(rep(row, each = n))
retmat = rmat + rowmat
retmat[rowmat == 0] = 0
ret[2:(n+1),] = retmat
if(1 %in% row){
ret[(2:n+1),] = row
}
ret[ret < 0] = 0
ret = ret / rowSums(ret)
return(ret)
}
tw = segadus(rw,10)
tw
colMeans(tw)
segadus = function(row,n){
ret = matrix(, nrow = n+1, ncol = 4)
ret[1,] = row
rmat = matrix(data = rnorm(4*n, sd = 0.1), nrow = n)
rowmat = matrix(rep(row, each = n), nrow = n)
retmat = rmat + rowmat
retmat[rowmat == 0] = 0
ret[2:(n+1),] = retmat
if(1 %in% row){
ret[(2:n+1),] = row
}
ret[ret < 0] = 0
ret = ret / rowSums(ret)
return(ret)
}
tw = segadus(rw,10)
tw
colMeans(tw)
segadus = function(row,n){
ret = matrix(, nrow = n+1, ncol = 4)
ret[1,] = row
rmat = matrix(data = rnorm(4*n, sd = 0.1), nrow = n)
rowmat = matrix(rep(row, each = n), nrow = n)
retmat = rmat + rowmat
retmat[rowmat == 0] = 0
ret[2:(n+1),] = retmat
if(1 %in% row){
ret[(2:n+1),] = row
}
ret[ret < 0] = 0
ret[ret > 1] = 1
ret = ret / rowSums(ret)
return(ret)
}
tw = segadus(c(0.9,0.1,0,0),10)
tw
colMeans(tw)
tw = segadus(c(0.9,0.1,0,0),20)
tw
tw = segadus(c(0.9,0.1,0,0),10)
tw
tw = segadus(c(1,0,0,0),10)
tw
segadus = function(row,n){
ret = matrix(, nrow = n+1, ncol = 4)
ret[1,] = row
rmat = matrix(data = rnorm(4*n, sd = 0.1), nrow = n)
rowmat = matrix(rep(row, each = n), nrow = n)
retmat = rmat + rowmat
retmat[rowmat == 0] = 0
ret[2:(n+1),] = retmat
if(1 %in% row){
ret[(2:n+1),] = rep(row, each = n)
}
ret[ret < 0] = 0
ret[ret > 1] = 1
ret = ret / rowSums(ret)
return(ret)
}
tw = segadus(c(1,0,0,0),10)
tw
segadus = function(row,n){
ret = matrix(, nrow = n+1, ncol = 4)
ret[1,] = row
rmat = matrix(data = rnorm(4*n, sd = 0.1), nrow = n)
rowmat = matrix(rep(row, each = n), nrow = n)
retmat = rmat + rowmat
retmat[rowmat == 0] = 0
ret[2:(n+1),] = retmat
if(1 %in% row){
ret[(2:(n+1),] = rep(row, each = n)
}
ret[ret < 0] = 0
ret[ret > 1] = 1
ret = ret / rowSums(ret)
return(ret)
}
tw = segadus(c(1,0,0,0),10)
segadus = function(row,n){
ret = matrix(, nrow = n+1, ncol = 4)
ret[1,] = row
rmat = matrix(data = rnorm(4*n, sd = 0.1), nrow = n)
rowmat = matrix(rep(row, each = n), nrow = n)
retmat = rmat + rowmat
retmat[rowmat == 0] = 0
ret[2:(n+1),] = retmat
if(1 %in% row){
ret[2:(n+1),] = rep(row, each = n)
}
ret[ret < 0] = 0
ret[ret > 1] = 1
ret = ret / rowSums(ret)
return(ret)
}
tw = segadus(c(1,0,0,0),10)
tw
segadus = function(row,n){
ret = matrix(, nrow = n+1, ncol = 4)
ret[1,] = row
rmat = matrix(data = rnorm(4*n, sd = 0.1), nrow = n)
rowmat = matrix(rep(row, each = n), nrow = n)
retmat = rmat + rowmat
retmat[rowmat == 0] = 0
ret[2:(n+1),] = retmat
if(1 %in% row){
ret[2:(n+1),] = rep(row, each = n)
}
ret[ret < 0] = 0
ret[ret > 1] = 1
ret = ret / rowSums(ret)
return(ret)
}
tw = segadus(c(0,1,0,0),10)
tw
colMeans(tw)
tw = segadus(c(0.35,0.3,0.15,0.1),10)
tw
tw = segadus(c(0.35,0.3,0.15,0.1),10)
tw
colMeans(tw)
rnorm(10, mean = 0.1, sd = 0.1)
87.52 + 6.78
?rpois
1-(1-0.05 / 25)**25
1-(1-0.05)**25
1-(1-0.05/25)**25
citations()
"citations()"
getwd()
setwd("C:\Users\Mats\Documents\Kool\MAKATÖÖ\TEST\test")
setwd("C:/Users/Mats/Documents/Kool/MAKATÖÖ/TEST/test")
load("taks_info.RData")
load("sid506.RData")
d506.100 = read.csv("d506_100.csv")
data = d506.100
vars = names(data)[3:49]
data$cl80 = "cl80";data$cl70 = "cl70";data$cl50 = "cl50";
data[data$ARV_VMA >= .8,]$cl80 = "MA"
data[data$ARV_VKU >= .8,]$cl80 = "KU"
data[data$ARV_VKS >= .8,]$cl80 = "KS"
data[data$ARV_VXX >= .8,]$cl80 = "KX"
data[data$ARV_VMA >= .7,]$cl70 = "MA"
data[data$ARV_VKU >= .7,]$cl70 = "KU"
data[data$ARV_VKS >= .7,]$cl70 = "KS"
data[data$ARV_VXX >= .7,]$cl70 = "KX"
data[data$ARV_VMA >= .5,]$cl50 = "MA"
data[data$ARV_VKU >= .5,]$cl50 = "KU"
data[data$ARV_VKS >= .5,]$cl50 = "KS"
data[data$ARV_VXX >= .5,]$cl50 = "KX"
d70 = data[data$cl70 != "cl70",]
d80 = data[data$cl80 != "cl80",]
require(nnet)
pred = matrix(0,nrow = dim(d_80)[1], ncol = 4)
N = 500; ssize = 4
for(i in 1:N){
var.mult.sample = sample(var.mult,ssize)
formula = as.formula(paste("cl70", paste(var.mult.sample, collapse=" + "), sep=" ~ "))
m = stepAIC(multinom(formula, d80, maxit = 500), direction = "backward")
#m = multinom(formula, d80, maxit = 100) #võtsin maxit 1000 pealt 100 peale
pred0 = predict(m, newdata = d_80, type = "probs")
pred = pred0 + pred
}
pred = pred/N
var.mult = names(d70)[c(5:38)] #3. on muld
pred = matrix(0,nrow = dim(d_80)[1], ncol = 4)
N = 500; ssize = 4
for(i in 1:N){
var.mult.sample = sample(var.mult,ssize)
formula = as.formula(paste("cl70", paste(var.mult.sample, collapse=" + "), sep=" ~ "))
m = stepAIC(multinom(formula, d80, maxit = 500), direction = "backward")
#m = multinom(formula, d80, maxit = 100) #võtsin maxit 1000 pealt 100 peale
pred0 = predict(m, newdata = d_80, type = "probs")
pred = pred0 + pred
}
??stepAIC
require(MASS)
pred = matrix(0,nrow = dim(d_80)[1], ncol = 4)
N = 500; ssize = 4
for(i in 1:N){
var.mult.sample = sample(var.mult,ssize)
formula = as.formula(paste("cl70", paste(var.mult.sample, collapse=" + "), sep=" ~ "))
m = stepAIC(multinom(formula, d80, maxit = 500), direction = "backward")
#m = multinom(formula, d80, maxit = 100) #võtsin maxit 1000 pealt 100 peale
pred0 = predict(m, newdata = d_80, type = "probs")
pred = pred0 + pred
}
d_80 = data[data$cl80 == "cl80",]
pred = matrix(0,nrow = dim(d_80)[1], ncol = 4)
N = 500; ssize = 4
for(i in 1:N){
var.mult.sample = sample(var.mult,ssize)
formula = as.formula(paste("cl70", paste(var.mult.sample, collapse=" + "), sep=" ~ "))
m = stepAIC(multinom(formula, d80, maxit = 500), direction = "backward")
#m = multinom(formula, d80, maxit = 100) #võtsin maxit 1000 pealt 100 peale
pred0 = predict(m, newdata = d_80, type = "probs")
pred = pred0 + pred
}
pred = pred/N
tst = round(pred,3)
predx = data.frame(pred);predx = predx[,c("MA","KU","KS","KX")]
predx$aproovitykk_id = d_80$aproovitykk_id
dp = merge(predx, taks.info, by = "aproovitykk_id", all.x = T)
sqrt((sum((dp[,11:14]-dp[,2:5])**2))/dim(dp)[1]/4)
dev.off()
par(mfrow = c(2,2))
plot(dp[,11],dp[,2], xlab = "Mänd", ylab = "Hinnang", xlim = c(0,1), ylim = c(0,1), col = rgb(red = 0, green = 0, blue = 0, alpha = 0.369))
plot(dp[,12],dp[,3], xlab = "Kuusk", ylab = "Hinnang", xlim = c(0,1), ylim = c(0,1), col = rgb(red = 0, green = 0, blue = 0, alpha = 0.369))
plot(dp[,13],dp[,4], xlab = "Kask", ylab = "Hinnang", xlim = c(0,1), ylim = c(0,1), col = rgb(red = 0, green = 0, blue = 0, alpha = 0.369))
plot(dp[,14],dp[,5], xlab = "Muu", ylab = "Hinnang", xlim = c(0,1), ylim = c(0,1), col = rgb(red = 0, green = 0, blue = 0, alpha = 0.369))
tst = round(pred,3)
rowSums(tst)
var.mult = names(d70)[c(3, 5:38)] #3. on muld
var.mult[1] = "factor(muld)"
pred = matrix(0,nrow = dim(d_80)[1], ncol = 4)
N = 1000; ssize = 3
for(i in 1:N){
var.mult.sample = sample(var.mult,ssize)
formula = as.formula(paste("cl70", paste(var.mult.sample, collapse=" + "), sep=" ~ "))
m = stepAIC(multinom(formula, d80, maxit = 1000), direction = "backward")
#m = multinom(formula, d80, maxit = 100) #võtsin maxit 1000 pealt 100 peale
pred0 = predict(m, newdata = d_80, type = "probs")
pred = pred0 + pred
}
pred = pred/N
tst = round(pred,3)
predx = data.frame(pred);predx = predx[,c("MA","KU","KS","KX")]
predx$aproovitykk_id = d_80$aproovitykk_id
dp = merge(predx, taks.info, by = "aproovitykk_id", all.x = T)
dev.off()
par(mfrow = c(2,2))
plot(dp[,11],dp[,2], xlab = "Mänd", ylab = "Hinnang", xlim = c(0,1), ylim = c(0,1), col = rgb(red = 0, green = 0, blue = 0, alpha = 0.369))
plot(dp[,12],dp[,3], xlab = "Kuusk", ylab = "Hinnang", xlim = c(0,1), ylim = c(0,1), col = rgb(red = 0, green = 0, blue = 0, alpha = 0.369))
plot(dp[,13],dp[,4], xlab = "Kask", ylab = "Hinnang", xlim = c(0,1), ylim = c(0,1), col = rgb(red = 0, green = 0, blue = 0, alpha = 0.369))
plot(dp[,14],dp[,5], xlab = "Muu", ylab = "Hinnang", xlim = c(0,1), ylim = c(0,1), col = rgb(red = 0, green = 0, blue = 0, alpha = 0.369))
sqrt((sum((dp[,11:14]-dp[,2:5])**2))/dim(dp)[1]/4)
pred = matrix(0,nrow = dim(d_80)[1], ncol = 4)
N = 1000; ssize = 3
for(i in 1:N){
var.mult.sample = sample(var.mult,ssize)
formula = as.formula(paste("cl70", paste(var.mult.sample, collapse=" + "), sep=" ~ "))
m = stepAIC(multinom(formula, d80, maxit = 1000))
#m = multinom(formula, d80, maxit = 100) #võtsin maxit 1000 pealt 100 peale
pred0 = predict(m, newdata = d_80, type = "probs")
pred = pred0 + pred
}
pred = pred/N
tst = round(pred,3)
predx = data.frame(pred);predx = predx[,c("MA","KU","KS","KX")]
predx$aproovitykk_id = d_80$aproovitykk_id
dp = merge(predx, taks.info, by = "aproovitykk_id", all.x = T)
dev.off()
par(mfrow = c(2,2))
plot(dp[,11],dp[,2], xlab = "Mänd", ylab = "Hinnang", xlim = c(0,1), ylim = c(0,1), col = rgb(red = 0, green = 0, blue = 0, alpha = 0.369))
plot(dp[,12],dp[,3], xlab = "Kuusk", ylab = "Hinnang", xlim = c(0,1), ylim = c(0,1), col = rgb(red = 0, green = 0, blue = 0, alpha = 0.369))
plot(dp[,13],dp[,4], xlab = "Kask", ylab = "Hinnang", xlim = c(0,1), ylim = c(0,1), col = rgb(red = 0, green = 0, blue = 0, alpha = 0.369))
plot(dp[,14],dp[,5], xlab = "Muu", ylab = "Hinnang", xlim = c(0,1), ylim = c(0,1), col = rgb(red = 0, green = 0, blue = 0, alpha = 0.369))
sqrt((sum((dp[,11:14]-dp[,2:5])**2))/dim(dp)[1]/4)
d_70 = data[data$cl70 == "cl70",]
pred = matrix(0,nrow = dim(d_80)[1], ncol = 4)
N = 1000; ssize = 4
for(i in 1:N){
var.mult.sample = sample(var.mult,ssize)
formula = as.formula(paste("cl70", paste(var.mult.sample, collapse=" + "), sep=" ~ "))
m = stepAIC(multinom(formula, d80, maxit = 1000))
#m = multinom(formula, d80, maxit = 100) #võtsin maxit 1000 pealt 100 peale
pred0 = predict(m, newdata = d_80, type = "probs")
pred = pred0 + pred
}
pred = pred/N
tst = round(pred,3)
predx = data.frame(pred);predx = predx[,c("MA","KU","KS","KX")]
predx$aproovitykk_id = d_80$aproovitykk_id
dp = merge(predx, taks.info, by = "aproovitykk_id", all.x = T)
dev.off()
par(mfrow = c(2,2))
plot(dp[,11],dp[,2], xlab = "Mänd", ylab = "Hinnang", xlim = c(0,1), ylim = c(0,1), col = rgb(red = 0, green = 0, blue = 0, alpha = 0.369))
plot(dp[,12],dp[,3], xlab = "Kuusk", ylab = "Hinnang", xlim = c(0,1), ylim = c(0,1), col = rgb(red = 0, green = 0, blue = 0, alpha = 0.369))
plot(dp[,13],dp[,4], xlab = "Kask", ylab = "Hinnang", xlim = c(0,1), ylim = c(0,1), col = rgb(red = 0, green = 0, blue = 0, alpha = 0.369))
plot(dp[,14],dp[,5], xlab = "Muu", ylab = "Hinnang", xlim = c(0,1), ylim = c(0,1), col = rgb(red = 0, green = 0, blue = 0, alpha = 0.369))
sqrt((sum((dp[,11:14]-dp[,2:5])**2))/dim(dp)[1]/4)
#ssize = 3; N = 500: #0.2063837; N = 2500: 0.2065031
#sama ilma kaaludeta: 0.2075632; 0.2056211; n500 mullaga 0.2054041, kui step direction default: 0.2052452
#ssize 4 n500 0.2107895
pred = matrix(0,nrow = dim(d_70)[1], ncol = 4)
N = 1000; ssize = 4
for(i in 1:N){
var.mult.sample = sample(var.mult,ssize)
formula = as.formula(paste("cl70", paste(var.mult.sample, collapse=" + "), sep=" ~ "))
m = stepAIC(multinom(formula, d70, maxit = 1000))
#m = multinom(formula, d80, maxit = 100) #võtsin maxit 1000 pealt 100 peale
pred0 = predict(m, newdata = d_70, type = "probs")
pred = pred0 + pred
}
pred = pred/N
tst = round(pred,3)
predx = data.frame(pred);predx = predx[,c("MA","KU","KS","KX")]
predx$aproovitykk_id = d_70$aproovitykk_id
dp = merge(predx, taks.info, by = "aproovitykk_id", all.x = T)
dev.off()
par(mfrow = c(2,2))
plot(dp[,11],dp[,2], xlab = "Mänd", ylab = "Hinnang", xlim = c(0,1), ylim = c(0,1), col = rgb(red = 0, green = 0, blue = 0, alpha = 0.369))
plot(dp[,12],dp[,3], xlab = "Kuusk", ylab = "Hinnang", xlim = c(0,1), ylim = c(0,1), col = rgb(red = 0, green = 0, blue = 0, alpha = 0.369))
plot(dp[,13],dp[,4], xlab = "Kask", ylab = "Hinnang", xlim = c(0,1), ylim = c(0,1), col = rgb(red = 0, green = 0, blue = 0, alpha = 0.369))
plot(dp[,14],dp[,5], xlab = "Muu", ylab = "Hinnang", xlim = c(0,1), ylim = c(0,1), col = rgb(red = 0, green = 0, blue = 0, alpha = 0.369))
sqrt((sum((dp[,11:14]-dp[,2:5])**2))/dim(dp)[1]/4)
pred = matrix(0,nrow = dim(d_80)[1], ncol = 4)
N = 100; ssize = 4
for(i in 1:N){
var.mult.sample = sample(var.mult,ssize)
formula = as.formula(paste("cl80", paste(var.mult.sample, collapse=" + "), sep=" ~ "))
m = stepAIC(multinom(formula, d80, maxit = 1000))
#m = multinom(formula, d80, maxit = 100) #võtsin maxit 1000 pealt 100 peale
pred0 = predict(m, newdata = d_80, type = "probs")
pred = pred0 + pred
}
pred = pred/N
tst = round(pred,3)
predx = data.frame(pred);predx = predx[,c("MA","KU","KS","KX")]
predx$aproovitykk_id = d_80$aproovitykk_id
dp = merge(predx, taks.info, by = "aproovitykk_id", all.x = T)
dev.off()
par(mfrow = c(2,2))
plot(dp[,11],dp[,2], xlab = "Mänd", ylab = "Hinnang", xlim = c(0,1), ylim = c(0,1), col = rgb(red = 0, green = 0, blue = 0, alpha = 0.369))
plot(dp[,12],dp[,3], xlab = "Kuusk", ylab = "Hinnang", xlim = c(0,1), ylim = c(0,1), col = rgb(red = 0, green = 0, blue = 0, alpha = 0.369))
plot(dp[,13],dp[,4], xlab = "Kask", ylab = "Hinnang", xlim = c(0,1), ylim = c(0,1), col = rgb(red = 0, green = 0, blue = 0, alpha = 0.369))
plot(dp[,14],dp[,5], xlab = "Muu", ylab = "Hinnang", xlim = c(0,1), ylim = c(0,1), col = rgb(red = 0, green = 0, blue = 0, alpha = 0.369))
sqrt((sum((dp[,11:14]-dp[,2:5])**2))/dim(dp)[1]/4)
length(var.mult)
choose(35,4)
